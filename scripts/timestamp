#!/usr/bin/env perl

#
# Originally based on timestamp 
# (c) 2010–2020 Mantas Mikulėnas <grawity@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# MIT License (also available at <https://spdx.org/licenses/MIT>)
#

use warnings;
use strict;
use 5.20;
use Net::RFC3161::Timestamp;
use Getopt::Long qw(:config bundling no_ignore_case);

my $DEF_TSA = "startcom";

sub usage {
    my $tsas=list_tsas();
    
    print "$_\n" for (
    "Usage: $::arg0 [-h ALGO] [-o OUTPUT] INPUT...",
    "",
    "  -h, --hash ALGO",
    "  -o, --output FILE",
    "  -p, --policy OID",
    "  -t, --tsa TSA",
    "  -v, --verbose",
    "",
    "Available TSAs: ".join(", ", sort grep {!/\./} keys %{$tsas}),
    );
}

my $tsa = "digicert";
my $hash_algo;
my $policy;
my $out_file;
my $verbose;

GetOptions(
    "help" => sub { usage(); exit; },
    "h|hash=s" => \$hash_algo,
    "o|output=s" => \$out_file,
    "p|policy=s" => \$policy,
    "t|tsa=s" => \$tsa,
    "v|verbose!" => \$verbose,
) or exit(2);

if ($out_file && @ARGV > 1) {
    die("--output only makes sense with one input file");
}

if ($tsa !~ m!^https?://!) {
    if ($TSAs{$tsa}) {
        $tsa = $TSAs{$tsa};
    } else {
        die("unknown TSA '$tsa'");
    }
}

if (!@ARGV) {
    die("no files provided");
}

for my $in_file (@ARGV) {
    if (!-f $in_file) {
        _err("file '$in_file' not found");
        next;
    }

    $out_file //= "$in_file.tsr";
    _log("requesting timestamp for '$in_file'");

    my $req_buf = make_request_for_file($in_file, $hash_algo, $policy);
    if ($verbose) {
        say("generated timestamp query follows:");
        dump_ts("query", $req_buf);
    }

    my $res_buf = post_request_to_tsa($req_buf, $tsa);
    if ($verbose) {
        _info("received timestamp reply follows:");
        dump_ts("reply", $res_buf);
    }

    write_response_to_file($res_buf, $out_file);
    _info("wrote signed timestamp to '$out_file'");
    $out_file = undef;
}

_exit();
# vim: ts=4:sw=4:et
